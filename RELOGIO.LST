     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    mov 	ax,data
     4 00000003 8ED8                        mov 	ds,ax
     5 00000005 B8[0000]                    mov 	ax,stack
     6 00000008 8ED0                        mov 	ss,ax
     7 0000000A BC[0001]                    mov 	sp,stacktop
     8 0000000D 31C0                    	XOR 	AX, AX
     9 0000000F 8EC0                        MOV 	ES, AX
    10 00000011 26A12000                    MOV     AX, [ES:intr*4];carregou AX com offset anterior
    11 00000015 A3[0100]                    MOV     [offset_dos], AX        ; offset_dos guarda o end. para qual ip de int 9 estava apontando anteriormente
    12 00000018 26A12200                    MOV     AX, [ES:intr*4+2]     ; cs_dos guarda o end. anterior de CS
    13 0000001C A3[0300]                    MOV     [cs_dos], AX
    14 0000001F FA                          CLI     
    15 00000020 268C0E2200                  MOV     [ES:intr*4+2], CS
    16 00000025 26C7062000[5900]            MOV     WORD [ES:intr*4],relogio
    17 0000002C FB                          STI
    18                                  	
    19                                  l1:
    20 0000002D 803E[0500]00            	cmp 	byte [tique], 0
    21 00000032 7503                    	jne 	ab
    22 00000034 E87000                  	call 	converte
    23 00000037 B40B                    ab: mov 	ah,0bh		
    24 00000039 CD21                        int 	21h			; Le buffer de teclado
    25 0000003B 3C00                        cmp 	al,0
    26 0000003D 7503                        jne 	fim	
    27 0000003F E9EBFF                      jmp 	l1
    28                                  fim:
    29 00000042 FA                      	CLI
    30 00000043 31C0                        XOR     AX, AX
    31 00000045 8EC0                        MOV     ES, AX
    32 00000047 A1[0300]                    MOV     AX, [cs_dos]
    33 0000004A 26A32200                    MOV     [ES:intr*4+2], AX
    34 0000004E A1[0100]                    MOV     AX, [offset_dos]
    35 00000051 26A32000                    MOV     [ES:intr*4], AX 
    36 00000055 B44C                        MOV     AH, 4Ch
    37 00000057 CD21                        int     21h
    38                                  
    39                                  relogio:
    40 00000059 50                      	push	ax
    41 0000005A 1E                      	push	ds
    42 0000005B B8[0000]                	mov     ax,data	
    43 0000005E 8ED8                    	mov     ds,ax	
    44                                      
    45 00000060 FE06[0500]                  inc	byte [tique]
    46 00000064 803E[0500]12                cmp	byte[tique], 18	
    47 00000069 7235                        jb		Fimrel
    48 0000006B C606[0500]00            	mov byte [tique], 0
    49 00000070 FE06[0600]              	inc byte [segundo]
    50 00000074 803E[0600]3C            	cmp byte [segundo], 60
    51 00000079 7225                    	jb   	Fimrel
    52 0000007B C606[0600]00            	mov byte [segundo], 0
    53 00000080 FE06[0700]              	inc byte [minuto]
    54 00000084 803E[0700]3C            	cmp byte [minuto], 60
    55 00000089 7215                    	jb   	Fimrel
    56 0000008B C606[0700]00            	mov byte [minuto], 0
    57 00000090 FE06[0800]              	inc byte [hora]
    58 00000094 803E[0800]18            	cmp byte [hora], 24
    59 00000099 7205                    	jb   	Fimrel
    60 0000009B C606[0800]00            	mov byte [hora], 0	
    61                                  Fimrel:
    62 000000A0 B020                        mov		al,20h
    63 000000A2 E620                    	out		20h,al
    64 000000A4 1F                      	pop		ds
    65 000000A5 58                      	pop		ax
    66 000000A6 CF                      	iret
    67                                  	
    68                                  converte:
    69 000000A7 50                          push 	ax
    70 000000A8 1E                      	push    ds
    71 000000A9 B8[0000]                	mov     ax, data
    72 000000AC 8ED8                    	mov     ds, ax
    73 000000AE 30E4                    	xor 	ah, ah
    74 000000B0 B30A                    	MOV     BL, 10
    75 000000B2 A0[0600]                	mov 	al, byte [segundo]
    76 000000B5 F6F3                        DIV     BL
    77 000000B7 0430                        ADD     AL, 30h                                                                                          
    78 000000B9 A2[0F00]                    MOV     byte [horario+6], AL
    79 000000BC 80C430                      ADD     AH, 30h
    80 000000BF 8826[1000]                  mov 	byte [horario+7], AH
    81                                      
    82 000000C3 30E4                    	xor 	ah, ah
    83 000000C5 A0[0700]                	mov 	al, byte [minuto]
    84 000000C8 F6F3                        DIV     BL
    85 000000CA 0430                        ADD     AL, 30h                                                                                          
    86 000000CC A2[0C00]                    MOV     byte [horario+3], AL
    87 000000CF 80C430                      ADD     AH, 30h
    88 000000D2 8826[0D00]                  mov 	byte [horario+4], AH
    89                                  	
    90 000000D6 30E4                    	xor 	ah, ah
    91 000000D8 A0[0800]                	mov 	al, byte [hora]
    92 000000DB F6F3                        DIV     BL
    93 000000DD 0430                        ADD     AL, 30h                                                                                          
    94 000000DF A2[0900]                    MOV     byte [horario], AL
    95 000000E2 80C430                      ADD     AH, 30h
    96 000000E5 8826[0A00]                  mov 	byte [horario+1], AH
    97                                  
    98                                  	; ESCRECVE HORARIO
    99                                  	; mov 	ah, 09h
   100                                  	; mov 	dx, horario
   101                                  	; int 	21h
   102                                  
   103 000000E9 1F                      	pop     ds
   104 000000EA 58                      	pop     ax
   105 000000EB C3                      	ret  
   106                                  
   107                                  segment data
   108                                  	eoi     	EQU 20h
   109                                      intr	   	EQU 08h
   110 00000000 00                      	char		db	0
   111 00000001 0000                    	offset_dos	dw	0
   112 00000003 0000                    	cs_dos		dw	0
   113 00000005 00                      	tique		db  0
   114 00000006 00                      	segundo		db  0
   115 00000007 00                      	minuto 		db  0
   116 00000008 00                      	hora 		db  0
   117 00000009 00003A00003A000020-     	horario		db  0,0,':',0,0,':',0,0,' ', 13,'$'
   118 00000012 0D24               
   119                                  segment stack stack
   120 00000000 <res 00000100>              resb 256
   121                                  stacktop:
